{"version":3,"sources":["App.js","serviceWorker.js","index.js","../node_modules/graphql-language-service-interface/dist sync /^.*$"],"names":["fetcher","params","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","then","response","text","responseBody","parse","e","DEFAULT_QUERY","App","state","schema","query","explorerIsOpen","_handleEditQuery","_this","setState","_handleToggleExplorer","_this2","this","getIntrospectionQuery","result","buildClientSchema","data","_this3","_this$state","react_default","a","createElement","className","graphiql_explorer_dist_default","onEdit","onToggleExplorer","dist_default","ref","_graphiql","onEditQuery","Toolbar","Button","onClick","handlePrettifyQuery","label","title","handleToggleHistory","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","map",".","./","./GraphQLLanguageService","./GraphQLLanguageService.js","./GraphQLLanguageService.js.flow","./autocompleteUtils","./autocompleteUtils.js","./autocompleteUtils.js.flow","./getAutocompleteSuggestions","./getAutocompleteSuggestions.js","./getAutocompleteSuggestions.js.flow","./getDefinition","./getDefinition.js","./getDefinition.js.flow","./getDiagnostics","./getDiagnostics.js","./getDiagnostics.js.flow","./getHoverInformation","./getHoverInformation.js","./getHoverInformation.js.flow","./getOutline","./getOutline.js","./getOutline.js.flow","./index","./index.js","./index.js.flow","webpackContext","req","id","webpackContextResolve","__webpack_require__","Error","code","keys","Object","resolve","module","exports"],"mappings":"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","file":"static/js/main.c06590c9.chunk.js","sourcesContent":["// @flow\n\nimport React, {Component} from 'react';\nimport GraphiQL from 'graphiql';\nimport GraphiQLExplorer from 'graphiql-explorer';\nimport {getIntrospectionQuery, buildClientSchema} from 'graphql';\n\nimport 'graphiql/graphiql.css';\nimport './App.css';\n\nimport type {GraphQLSchema} from 'graphql';\n\nfunction fetcher(params: Object): Object {\n  return fetch(\n    'https://serve.onegraph.com/dynamic?app_id=c333eb5b-04b2-4709-9246-31e18db397e1',\n    {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(params),\n    },\n  )\n    .then(function(response) {\n      return response.text();\n    })\n    .then(function(responseBody) {\n      try {\n        return JSON.parse(responseBody);\n      } catch (e) {\n        return responseBody;\n      }\n    });\n}\n\nconst DEFAULT_QUERY = `{\n  npm {\n    package(name: \"graphql\") {\n      name\n      downloads {\n        lastMonth {\n          count\n        }\n      }\n    }\n  }\n}`;\n\ntype State = {\n  schema: ?GraphQLSchema,\n  query: string,\n  explorerIsOpen: boolean,\n};\n\nclass App extends Component<{}, State> {\n  _graphiql: GraphiQL;\n  state = {schema: null, query: DEFAULT_QUERY, explorerIsOpen: true};\n\n  componentDidMount() {\n    fetcher({\n      query: getIntrospectionQuery(),\n    }).then(result => {\n      this.setState({schema: buildClientSchema(result.data)});\n    });\n  }\n\n  _handleEditQuery = (query: string): void => this.setState({query});\n\n  _handleToggleExplorer = () => {\n    this.setState({explorerIsOpen: !this.state.explorerIsOpen});\n  };\n\n  render() {\n    const {query, schema} = this.state;\n    return (\n      <div className=\"graphiql-container\">\n        <GraphiQLExplorer\n          schema={schema}\n          query={query}\n          onEdit={this._handleEditQuery}\n          explorerIsOpen={this.state.explorerIsOpen}\n          onToggleExplorer={this._handleToggleExplorer}\n        />\n        <GraphiQL\n          ref={ref => (this._graphiql = ref)}\n          fetcher={fetcher}\n          schema={schema}\n          query={query}\n          onEditQuery={this._handleEditQuery}>\n          <GraphiQL.Toolbar>\n            <GraphiQL.Button\n              onClick={() => this._graphiql.handlePrettifyQuery()}\n              label=\"Prettify\"\n              title=\"Prettify Query (Shift-Ctrl-P)\"\n            />\n            <GraphiQL.Button\n              onClick={() => this._graphiql.handleToggleHistory()}\n              label=\"History\"\n              title=\"Show History\"\n            />\n            <GraphiQL.Button\n              onClick={this._handleToggleExplorer}\n              label=\"Explorer\"\n              title=\"Toggle Explorer\"\n            />\n          </GraphiQL.Toolbar>\n        </GraphiQL>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","var map = {\n\t\".\": 35,\n\t\"./\": 35,\n\t\"./GraphQLLanguageService\": 70,\n\t\"./GraphQLLanguageService.js\": 70,\n\t\"./GraphQLLanguageService.js.flow\": 192,\n\t\"./autocompleteUtils\": 51,\n\t\"./autocompleteUtils.js\": 51,\n\t\"./autocompleteUtils.js.flow\": 193,\n\t\"./getAutocompleteSuggestions\": 44,\n\t\"./getAutocompleteSuggestions.js\": 44,\n\t\"./getAutocompleteSuggestions.js.flow\": 194,\n\t\"./getDefinition\": 52,\n\t\"./getDefinition.js\": 52,\n\t\"./getDefinition.js.flow\": 195,\n\t\"./getDiagnostics\": 54,\n\t\"./getDiagnostics.js\": 54,\n\t\"./getDiagnostics.js.flow\": 196,\n\t\"./getHoverInformation\": 55,\n\t\"./getHoverInformation.js\": 55,\n\t\"./getHoverInformation.js.flow\": 197,\n\t\"./getOutline\": 69,\n\t\"./getOutline.js\": 69,\n\t\"./getOutline.js.flow\": 198,\n\t\"./index\": 35,\n\t\"./index.js\": 35,\n\t\"./index.js.flow\": 199\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 95;"],"sourceRoot":""}